DECLARE @DatabaseName nvarchar(255)
DECLARE @UserName nvarchar(255) 
DECLARE @Command nvarchar(1000)
DECLARE @SqlStatement nvarchar(4000)

IF OBJECT_ID( 'tempdb..#temp') IS NOT NULL
DROP TABLE tempdb..#temp 
 
CREATE TABLE tempdb..#temp (name VARCHAR(100))

DECLARE database_cur CURSOR FOR 
SELECT sd.name FROM sys.databases sd
INNER JOIN (SELECT database_id,collation_name FROm sys.databases WHERE name='master') sd1
ON sd.collation_name=sd1.collation_name
AND sd.database_id >4 
WHERE sd.user_access=0 AND sd.is_read_only=0 and sd.database_id >4
AND sd.state_desc='ONLINE'  

OPEN database_cur
FETCH NEXT FROM database_cur INTO @DatabaseName

WHILE (@@FETCH_STATUS=0)
BEGIN
SELECT @Command='
INSERT INTO #temp 
SELECT UserName = su.name 
FROM '+quotename(@DatabaseName)+'..sysusers su
JOIN sys.server_principals sp ON sp.name = su.name
WHERE issqluser = 1 AND
(su.sid IS NOT NULL AND su.sid <> 0x0) AND
suser_sname(su.sid) is null 
ORDER BY su.name'

EXEC sp_executesql @command

DECLARE orphan_user_cur CURSOR FOR 
SELECT name FROM #temp WHERE name IS NOT NULL 

IF @@ROWCOUNT=0
BEGIN
PRINT 'No Orphan User to be fixed for '+@DatabaseName
END

OPEN orphan_user_cur 
FETCH NEXT FROM orphan_user_cur INTO @UserName 

WHILE (@@FETCH_STATUS = 0)
BEGIN 
PRINT @UserName + 'Orphan User Name Is Being Resynced' 
EXEC sp_change_users_login 'Update_one', @UserName, @UserName 
FETCH NEXT FROM orphan_user_cur INTO @UserName 
END 

CLOSE orphan_user_cur 
DEALLOCATE orphan_user_cur

TRUNCATE TABLE #temp 

FETCH NEXT FROM database_cur INTO @DatabaseName
END

CLOSE database_cur 
DEALLOCATE database_cur
---==================================================
/*
Author: Eitan Blumin | https://eitanblumin.com
Date Created: 2018-01-02
Last Update: 2020-03-30
Description:
	Fix All Orphaned Users Within Current Database, or all databases in the instance.
	Handles 3 possible use-cases:
	1. Login with same name as user exists – generate ALTER LOGIN to map the user to the login.
	2. No login with same name exists – generate DROP USER to delete the orphan user.
	3. Orphan user is [dbo] – change the database owner to SA (or whatever SA was renamed to)
More info: https://eitanblumin.com/2018/10/31/t-sql-script-to-fix-orphaned-db-users-easily/
*/
DECLARE
	 @Database	SYSNAME		= NULL	— Filter by a specific database. Leave NULL for all databases.


SET NOCOUNT ON;

— Variable declaration
DECLARE @user NVARCHAR(MAX), @loginExists BIT, @saName SYSNAME, @ownedSchemas NVARCHAR(MAX);

— Find the actual name of the "sa" login
SELECT @saName = [name] FROM sys.server_principals WHERE sid = 0x01;

IF OBJECT_ID('tempdb..#tmp') IS NOT NULL DROP TABLE #tmp;
CREATE TABLE #tmp (DBName SYSNAME NULL, UserName NVARCHAR(MAX), LoginExists BIT, OwnedSchemas NVARCHAR(MAX));
exec sp_MSforeachdb 'IF DATABASEPROPERTYEX(''?'', ''Status'') = ''ONLINE'' AND DATABASEPROPERTYEX(''?'', ''Updateability'') = ''READ_WRITE''
INSERT INTO #tmp
SELECT ''?'', dp.name AS user_name
, CASE WHEN dp.name IN (SELECT name COLLATE database_default FROM sys.server_principals) THEN 1 ELSE 0 END AS LoginExists
, OwnedSchemas = (
SELECT cmd + N''; ''
FROM
(
SELECT cmd = ''ALTER AUTHORIZATION ON SCHEMA::'' + QUOTENAME(sch.name) + N'' TO [dbo]''
FROM [?].sys.schemas AS sch
WHERE sch.principal_id = dp.principal_id
AND EXISTS (SELECT NULL FROM [?].sys.objects AS obj WHERE obj.schema_id = sch.schema_id)
UNION ALL
SELECT ''DROP SCHEMA '' + QUOTENAME(sch.name)
FROM [?].sys.schemas AS sch
WHERE sch.principal_id = dp.principal_id
AND NOT EXISTS (SELECT NULL FROM [?].sys.objects AS obj WHERE obj.schema_id = sch.schema_id)
) AS s
FOR XML PATH ('''')
)
FROM [?].sys.database_principals AS dp 
LEFT JOIN sys.server_principals AS sp ON dp.SID = sp.SID 
WHERE sp.SID IS NULL 
AND authentication_type_desc IN (''INSTANCE'',''WINDOWS'')
AND DATABASEPROPERTYEX(''?'',''Updateability'') = ''READ_WRITE'';'

IF EXISTS (SELECT NULL FROM #tmp WHERE DBName = @Database OR @Database IS NULL)
BEGIN
	DECLARE Orphans CURSOR FOR
	SELECT DBName, UserName, LoginExists, OwnedSchemas
	FROM #tmp
	WHERE DBName = @Database OR @Database IS NULL;

	OPEN Orphans
	FETCH NEXT FROM Orphans INTO @Database, @user, @loginExists, @ownedSchemas

	WHILE @@FETCH_STATUS = 0
	BEGIN
	 DECLARE @Command NVARCHAR(MAX)

	 IF @user = 'dbo'
		SET @Command = N'USE ' + QUOTENAME(@Database) + N'; ALTER AUTHORIZATION ON DATABASE::' + QUOTENAME(@Database) + N' TO ' + QUOTENAME(@saName) + N' — assign orphaned [dbo] to [sa]'
	 ELSE IF @loginExists = 0
		SET @Command = N'USE ' + QUOTENAME(@Database) + N'; ' + ISNULL(@ownedSchemas, N'') + N' DROP USER ' + QUOTENAME(@user) + N' — no existing login found'
	 ELSE
		SET @Command = N'USE ' + QUOTENAME(@Database) + N'; ALTER USER ' + QUOTENAME(@user) + N' WITH LOGIN = ' + QUOTENAME(@user) + N' — existing login found'
 
	 PRINT @Command;
	 —EXEC (@Command);

	FETCH NEXT FROM Orphans INTO @Database, @user, @loginExists, @ownedSchemas
	END

	CLOSE Orphans
	DEALLOCATE Orphans
END
ELSE
	PRINT N'No orphan users found!'